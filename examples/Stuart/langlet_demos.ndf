# LANGLET DEMOS
#
# The four demos show how Langlet's transforms can be used to extract information
# from noisy backgrounds.
#
# apple_test: fast detection of an embedded picture in an "easy" image
#
#             apple_test 'hel'
#             apple_test 'cog'
#
# peppers_test: not-so-fast detection of an embedded picture in a "difficult" image
#
#             peppers_test 0
#
# forensic_test: Lifting a fingerprint from a fabric background
#
#             forensic_test 0
#
# steganography_test: Extracting a handwritten message from a security envelope pattern 
#
#             steganography_test 0


loaddefs "langlet


loaddefs "display


# apple_test usage: apple_test 'hel' OR apple_test 'cog'

apple_test is op fn {
   write 'fast detection of an embedded picture in an "easy" image' ;
   img:=readpbm "apple-1.pbm ;
   img := not img ;
   writepbm img "ORIGINAL.pbm ;
   pat:=randm 16 16 0.5 ;
   bgr:=(tile pat 16 16) xor (randm 256 256 0.1) ;
   res:=bgr xor img ;
   writepbm res "PROBLEM.pbm ;
   det:=texdetect res fn ;
   writepbm det "RESULT.pbm ;
}


# peppers_test usage: peppers_test 0

peppers_test is op fn {
   write 'not-so-fast detection of an embedded picture in a "difficult" image' ;
   img:=readpbm "peppers.pbm ;
   writepbm img "ORIGINAL.pbm ;
   pat:=randm 8 8 0.5 ;
   bgr:=(tile pat 32 32) xor (randm 256 256 0.1) ;
   res:=bgr xor img ;
   writepbm res "PROBLEM.pbm ;
   write 'working on best solution...' ;
   det:=testall res ;
   writepbm det "RESULT.pbm ;
}


# forensic_test usage : forensic_test 0

forensic_test is op n {
   write 'Lifting a fingerprint from a fabric background' ;
   write 'original fingerprint' ;
   fgp := readpbm "fingerprint.pbm ;
   fgp := not fgp ;
   writepbm fgp "PRINT.pbm ;
   write 'fabric background' ;
   fab := readpbm "fabric.pbm ;
   writepbm fab "FABRIC_SIM.pbm ;
   write 'fingerprint on fabric' ;
   prb := readpbm "fingerprint_problem.pbm ;
   writepbm prb "PROBLEM.pbm ;
   write 'working on best solution...' ;
   bestsol := testall prb ;
   writepbm bestsol "BEST.pbm ;
   write 'quick and dirty solutions' ;
   helsol := texdetect prb 'hel' ;
   cogsol := texdetect prb 'cog' ;
   writepbm helsol "HEL.pbm ;
   writepbm cogsol "COG.pbm ;
}


# steganography_test usage: steganography_test 0

steganography_test is op n {
   write 'Extracting a handwritten message from a security envelope pattern' ;
   write 'original handwritten message' ;
   msg := readpbm "steg_msg.pbm ;
   msg := not msg ;
   writepbm msg "ORIGINAL.pbm ;
   write 'security envelope background' ;
   bgr := readpbm "steg_bgr.pbm ;
   noise := randm 256 512 0.1 ;
   bgr := bgr xor noise ;
   writepbm bgr "BACKGROUND.pbm ;
   write 'message hidden in background pattern' ;
   prb := msg xor bgr ;
   writepbm prb "PROBLEM.pbm ;
   write 'working on best solution...' ;
   bestsol := testall prb ;
   writepbm bestsol "BEST.pbm ;
   write 'quick and dirty solutions' ;
   helsol := texdetect prb 'hel' ;
   cogsol := texdetect prb 'cog' ;
   writepbm helsol "HEL.pbm ;
   writepbm cogsol "COG.pbm ;
}

   
