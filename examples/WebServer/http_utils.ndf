#
# HTTP utility functions
#


# 
# Support function to add a context entry
#

ws_set_ctxt_entry is op ctxt key value {
 %write 'http_context' key value;
  ctxt _tset key value;
  l
}


#
# Parse the http headers and store details in the provided
# context
#

ws_process_headers is op ctxt lines {
  reqline := first lines;
  optlines := rest lines;
  write 'Parsing Request' reqline (tally optlines);
  %;
  % split up the request line;
  %;
  cmd url versn := (` match reqline) cut reqline;
  ws_set_ctxt_entry ctxt "http_request url;
  ws_set_ctxt_entry ctxt "http_command cmd;
  ws_set_ctxt_entry ctxt "http_version versn;
  %;
  % Split up the url part;
  %;
  v1 := (`? match url) cut url;
  if (tally v1) = 1 then
    path := url;
    opts := '';
    params := [];
  else
    path opts := v1;
    params := (`& match opts) cut opts;
    params := each (op x { (`= match x) cut x }) params;
  endif;
  ws_set_ctxt_entry ctxt "http_path path;
  ws_set_ctxt_entry ctxt "http_opts opts;
  ws_set_ctxt_entry ctxt "params params;
  %;
  % split up the path;
  %;
  if path = '/' then
    ws_set_ctxt_entry ctxt "http_route '/public/index.html';
    ws_set_ctxt_entry ctxt "http_routev ['public', 'index.html'];
  else
    pathv := (`/ match path) cut path;
    ws_set_ctxt_entry ctxt "http_route path;
    ws_set_ctxt_entry ctxt "http_routev pathv;
  endif;
  %;
  % finally split up the additional lines;
  %;
  ws_set_ctxt_entry ctxt "http_headers (each (op line {(`: match line) cut line}) optlines); 
  ctxt
}  
    

#
# Support function to write a response entry
#

ws_write_response is op iow hcode htext {
  nio_write iow (link 'HTTP/1.1 ' (string hcode) ' ' (string htext) crlf);
  l
}


#
# Support function to write a header entry
#

ws_write_header is op iow name val {
  nio_write iow (link (string name) ': ' val crlf);
  l
}


#
# Support function to terminate the header
#

ws_end_header is op iow {
  nio_write iow crlf;
  nio_write iow crlf;
  l
}




