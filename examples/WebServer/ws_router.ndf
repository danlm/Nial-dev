#
# Module to route requests to an appropriate handler
#

write '*** Creating route table';
ws_route_table := _tcreate 1;


#
# add a new route to the table to serve requests
#

ws_add_route is op rbase rfn {
  nonlocal ws_route_table;
  write '*** adding route entry' rbase;
  ws_route_table _tset [phrase rbase, rfn];
  l
}

#
# Get the route entry
#

ws_get_route is operation rbase {
  nonlocal ws_route_table;
  ws_route_table _tget [phrase rbase, []]}


# --------------------------
# Simple error page generator
#

ws_gen_error_page is op st msg {
  iow := get_nio_out_stream st;
  nio_write iow 'HTTP/1.1 400 BAD REQUEST';
  ws_write_header iow 'Content-Type' 'text/html';
  nio_write iow crlf;
  nio_write iow crlf;
  nio_write iow '<html><head><title>Request Failed</title></head><body>';
  nio_write iow '<h2>Bad Request Received</h2><br />';
  nio_write iow msg;
  nio_write iow '</body></html>';
  set_stream_status st "closing;
  l
}



# -----------------------------------------------
# Decide which handler should process the request
#

ws_route_request is op st {
  write 'ws_route_request';
  ctxt := get_net_context st;
  routev := ctxt _tget "http_routev;
  write 'Routing vector' routev;
  rbase := first routev;
  write 'Base for request' (phrase rbase);
  fn := ws_get_route rbase;
  if fn = [] then
    write '*** No route entry found for ' (phrase rbase);
    ws_gen_error_page st (link 'No entry found for ' (string (ctxt _tget "http_route)));
  else
    write '*** route found for ' (phrase rbase);
    write '*** page ' (apply fn st);
  endif;
  l
}

