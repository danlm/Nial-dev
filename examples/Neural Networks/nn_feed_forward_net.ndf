# Feed Forward Layered Networks

write 'nn_feed_forward_net loaded';
 

#  --------------------- Layers -----------------------------------
# A layer in this implementation is really a connection layer
# consisting of the weights between two layers of neurons. The neurons 
# themselves have no identity in the implementation.
# The weights are organised as vector of vectors rather than a 
# 2d matrix. This is to simplify training, especially in the backprop
# case with gradient descent.


nn_create_layer is operation weight_range layer_shape {
	% Create a collection of random vectors as the weight/connection
	  matrix between two groups of neurons. Include bias.;
	num_inputs num_outputs := layer_shape;
	weight_range eachright nn_rand_vector (num_outputs take (num_inputs + 1))}


nn_activate_layer is operation layer inputs {
	% Compute the activation of a layer based on inputs;
	% The bias neuron is assumed to have been added;
	layer eachleft innerproduct inputs}



# -------------------- Networks ----------------------------
# A network is just a vector of layers.


# nn_linear_net
# -------------
# Create a sequence of layers of the defined shape

nn_linear_net is operation weight_range net_shape {
	ninputs neuron_counts := net_shape;
	netw := [];
	for nc with neuron_counts do
		layer := weight_range nn_create_layer [ninputs, nc];
		netw := layer hitch netw;
		ninputs := nc;
	endfor;
	reverse netw} 


# nn_feed_net
# -----------
# Feed input through a neural net collecting the output necessary
# to train the network.

nn_feed_net is transformer trans_fn operation netw inputs {
	% Pass inputs through layers of the network;
	res := [];
	% Layer inputs should include the bias neuron;
	layer_inputs := inputs;
	for layer with netw do
		activation := nn_activate_layer layer (layer_inputs link [1.0]);
		layer_outputs := each trans_fn activation;
		res := [layer_outputs, layer_inputs, activation, layer] hitch res;
		layer_inputs := layer_outputs;
	endfor;
	res}



# nn_test_net
# -----------
# Run a network through a set of data which consists of 
# input and output pairs

nn_test_net is transformer trans_fn operation nnet tdata {
	for d with tdata do
		t_input expected_output := d;
		write (first first (nn_feed_net trans_fn nnet t_input)) expected_output;
	endfor;
	l}



# ============== Some useful network definitions ===================
# Curry some useful definitions

nn_linear_sigmoid_net is ((0.0 1.0) nn_linear_net);
nn_linear_tanh_net    is ((-1.0 1.0) nn_linear_net);

